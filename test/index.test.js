import {hexToU8, u8toHex} from 'cbor2/utils';
import {parseEDN, registerAppString} from '../lib/index.js';
import assert from 'node:assert/strict';
// eslint-disable-next-line n/no-unsupported-features/node-builtins
import test from 'node:test';

test('index', () => {
  for (const [str, expected] of [
    ['1', '01'],
    ['-0', 'f98000'],
    ['-0.0', 'f98000'],
    ['-0.0e0', 'f98000'],
    ['1.125', 'f93c80'],
    ['Infinity', 'f97c00'],
    ['-Infinity', 'f9fc00'],
    ['NaN', 'f97e00'],
    ['Infinity_1', 'f97c00'],
    ['-Infinity_1', 'f9fc00'],
    ['NaN_1', 'f97e00'],
    ['Infinity_2', 'fa7f800000'],
    ['-Infinity_2', 'faff800000'],
    ['NaN_2', 'fa7fc00000'],
    ['Infinity_3', 'fb7ff0000000000000'],
    ['-Infinity_3', 'fbfff0000000000000'],
    ['NaN_3', 'fb7ff8000000000000'],
    ['/ A zero! / 0', '00'],
    ['# A zero!\n0', '00'],
    ['{}', 'a0'],
    ['false', 'f4'],
    ['true', 'f5'],
    ['null', 'f6'],
    ['undefined', 'f7'],
    ['{"a": true, "b": false}', 'a26161f56162f4'],
    ['{1: 0, 2: 1, 3: 2}', 'a3010002010302'],
    ["2(h'02')", 'c24102'],
    ['simple(0)', 'e0'],
    ['simple(20)', 'f4'],
    ['[]', '80'],
    ['[ ]', '80'],
    ['[0]', '8100'],
    ['[0, 1]', '820001'],
    ['[0, 1, 2,]', '83000102'],
    ['[0, 1, 2, ]', '83000102'],
    ['[0 1 2]', '83000102'],
    ['"foo"', '63666f6f'],
    ['"foo\\"\\b\\f\\r\\n\\t\\\\\\/"', '6b666f6f22080c0d0a095c2f'],
    ['"E\\u0308"', '6345cc88'],
    ['"E\\u{0308}"', '6345cc88'],
    ['"E\\u{308}"', '6345cc88'],
    ['"\u{1F4A9}"', '64f09f92a9'],
    ['"\\u{1F4A9}"', '64f09f92a9'],
    ['"\\u{01F4A9}"', '64f09f92a9'],
    ['"\\u{001F4A9}"', '64f09f92a9'],
    ['"\\u{0001F4A9}"', '64f09f92a9'],
    ['"\\u{000061}"', '6161'],
    ['"\\u{10ffff}"', '64f48fbfbf'],
    ['"\\u{10fff}"', '64f090bfbf'],
    ['"\\u{9000}"', '63e98080'],
    ['"\\u{a000}"', '63ea8080'],
    ['"\\u{d000}"', '63ed8080'],
    ['"\\u{d00}"', '63e0b480'],
    ['"\\uD83D\\uDCA9"', '64f09f92a9'],
    ['"foo" + "bar"', '66666f6f626172'],
    ["\t'foo'", '43666f6f'],
    [" 'foo' + 'bar'", '46666f6f626172'],
    ['"\'"', '6127'],
    ["h''", '40'],
    ["h'02'", '4102'],
    ["h'# foo\n02'", '4102'],
    ["h'# foo\\'\"\n02'", '4102'],
    ["h'/ foo / 02'", '4102'],
    ["h'/ foo \\'\" / 02'", '4102'],
    ["h'/ foo \\/\\b / /bar/ 02'", '4102'],
    ["b64'AgM='", '420203'],
    ["b64' _w'", '41ff'],
    ["b64'#foo\n   Zm9vCg=='", '44666f6f0a'],
    ["b64'#foo\n#bar\n  Zm9v  # \\'\"'", '43666f6f'],
    [`\
98([<< {/alg/ 1: -7 /ECDSA 256/} >>, # == h'a10126'
    ...                              # rest elided here
])`, 'd8628243a10126d90378f6'],
    ["zzz'fo\\to'", 'd903e782637a7a7a64666f096f'],
    ['""_', '7fff'],
    ['(_ "foo")', '7f63666f6fff'],
    ['(_ "foo" "bar")', '7f63666f6f63626172ff'],
    ['(_ "foo" "bar" "baz")', '7f63666f6f636261726362617aff'],
    ['2_i', '02'],
    ['2_0', '1802'],
    ['2_1', '190002'],
    ['2_2', '1a00000002'],
    ['2_3', '1b0000000000000002'],
    ['2.0_1', 'f94000'],
    ['2.0_2', 'fa40000000'],
    ['2.0_3', 'fb4000000000000000'],
    ['0o777', '1901ff'],
    ['0b111', '07'],
    ['0x4c', '184c'],
    ['0x4Cp16', 'fa4a980000'],
    ['0x4C.abp16', 'fa4a995600'],
    ['0x.4p4', 'f94400'],
    ['-0x.4p4', 'f9c400'],
    ['-0x4C.abp16', 'faca995600'],
    ['+0x.4p4', 'f94400'],
    ['+0x4C.abp16', 'fa4a995600'],
    ['41.', 'f95120'],
    ['41.1', 'fb40448ccccccccccd'],
    ['41.12', 'fb40448f5c28f5c28f'],
    ['41.123', 'fb40448fbe76c8b439'],
    ['.1', 'fb3fb999999999999a'],
    ['.12', 'fb3fbeb851eb851eb8'],
    ['1e2', 'f95640'],
    ['1e-2', 'fb3f847ae147ae147b'],
    ['256_3(1_2)', 'db00000000000001001a00000001'],
    ['256_2(-1.125_2)', 'da00000100fabf900000'],
    ['255_1(-1_i)', 'd900ff20'],
    ['[_]', '9fff'],
    ['[_ 1, 2]', '9f0102ff'],
    ['[_i 1, 2]', '820102'],
    ['[_0 1, 2]', '98020102'],
    ['[_1 1, 2]', '9900020102'],
    ['[_2 1, 2]', '9a000000020102'],
    ['[_3 1, 2]', '9b00000000000000020102'],
    ['{_ }', 'bfff'],
    ['{_ 1: 2}', 'bf0102ff'],
    ['{_i "a": 1, "b": 2}', 'a2616101616202'],
    ['{_0 "a": 1, "b": 2}', 'b802616101616202'],
    ['{_1 "a": 1, "b": 2}', 'b90002616101616202'],
    ['{_2 "a": 1, "b": 2}', 'ba00000002616101616202'],
    ['{_3 "a": 1, "b": 2}', 'bb0000000000000002616101616202'],
    ['"foo"_i', '63666f6f'],
    ['...', 'd90378f6'],
    ['"foo" + ...', 'd903788263666f6fd90378f6'],
    ['... + "foo"', 'd9037882d90378f663666f6f'],
    ['... + << "foo" >>', 'd9037882d90378f64463666f6f'],
    ["... + zzz'foo'", 'd9037882d90378f6d903e782637a7a7a63666f6f'],
    ["... + ip'192.168.1.2'", 'd9037882d90378f644c0a80102'],
    ["ip'250.200.100.10'", '44fac8640a'],
    ["ip'192.168.1.2/13'", '820d42c0a0'],
    ["ip'::192.168.1.2'", '50000000000000000000000000c0a80102'],
    ["IP'::192.168.1.2'", 'd83650000000000000000000000000c0a80102'],
    ["ip'2008::1:2'", '5020080000000000000000000000010002'],
    ["ip'2001:0db8:85a3:0000:0000:8a2e:0370:7334'", '5020010db885a3000000008a2e03707334'],
    ["ip'::0db8:85a3:0000:0000:8a2e:0370:7334'", '5000000db885a3000000008a2e03707334'],
    ["ip'2001::85a3:0000:0000:8a2e:0370:7334'", '502001000085a3000000008a2e03707334'],
    ["ip'::85a3:0000:0000:8a2e:0370:7334'", '500000000085a3000000008a2e03707334'],
    ["ip'2001::0000:0000:8a2e:0370:7334'", '50200100000000000000008a2e03707334'],
    ["ip'2001:0db8::0000:0000:8a2e:0370:7334'", '5020010db80000000000008a2e03707334'],
    ["ip'2001:0db8:85a3::0000:8a2e:0370:7334'", '5020010db885a3000000008a2e03707334'],
    ["ip'2001:0db8::0000:0000:8a2e:0370:7334'", '5020010db80000000000008a2e03707334'],
    ["ip'2001::0000:0000:8a2e:0370:7334'", '50200100000000000000008a2e03707334'],
    ["ip'1:2:3:4:5:6:7:8'", '5000010002000300040005000600070008'],
    ["ip'::2:3:4:5:6:7:8'", '5000000002000300040005000600070008'],
    ["ip'1::3:4:5:6:7:8'", '5000010000000300040005000600070008'],
    ["ip'1:2::4:5:6:7:8'", '5000010002000000040005000600070008'],
    ["ip'1:2:3::5:6:7:8'", '5000010002000300000005000600070008'],
    ["ip'1:2:3:4::6:7:8'", '5000010002000300040000000600070008'],
    ["ip'1:2:3:4:5::7:8'", '5000010002000300040005000000070008'],
    ["ip'1:2:3:4:5:6::8'", '5000010002000300040005000600000008'],
    ["ip'1:2:3:4:5:6:7::'", '5000010002000300040005000600070000'],
    ["ip'::3:4:5:6:7:8'", '5000000000000300040005000600070008'],
    ["ip'1::4:5:6:7:8'", '5000010000000000040005000600070008'],
    ["ip'1:2::5:6:7:8'", '5000010002000000000005000600070008'],
    ["ip'1:2:3::6:7:8'", '5000010002000300000000000600070008'],
    ["ip'1:2:3:4::7:8'", '5000010002000300040000000000070008'],
    ["ip'1:2:3:4:5::8'", '5000010002000300040005000000000008'],
    ["ip'1:2:3:4:5:6::'", '5000010002000300040005000600000000'],
    ["ip'::4:5:6:7:8'", '5000000000000000040005000600070008'],
    ["ip'1::5:6:7:8'", '5000010000000000000005000600070008'],
    ["ip'1:2::6:7:8'", '5000010002000000000000000600070008'],
    ["ip'1:2:3::7:8'", '5000010002000300000000000000070008'],
    ["ip'1:2:3:4::8'", '5000010002000300040000000000000008'],
    ["ip'1:2:3:4:5::'", '5000010002000300040005000000000000'],
    ["ip'::5:6:7:8'", '5000000000000000000005000600070008'],
    ["ip'1::6:7:8'", '5000010000000000000000000600070008'],
    ["ip'1:2::7:8'", '5000010002000000000000000000070008'],
    ["ip'1:2:3::8'", '5000010002000300000000000000000008'],
    ["ip'1:2:3:4::'", '5000010002000300040000000000000000'],
    ["ip'::6:7:8'", '5000000000000000000000000600070008'],
    ["ip'1::7:8'", '5000010000000000000000000000070008'],
    ["ip'1:2::8'", '5000010002000000000000000000000008'],
    ["ip'1:2:3::'", '5000010002000300000000000000000000'],
    ["ip'::7:8'", '5000000000000000000000000000070008'],
    ["ip'1::8'", '5000010000000000000000000000000008'],
    ["ip'1:2::'", '5000010002000000000000000000000000'],
    ["ip'::8'", '5000000000000000000000000000000008'],
    ["ip'1::'", '5000010000000000000000000000000000'],
    ["ip'::1'", '5000000000000000000000000000000001'],
    ["ip'::'", '5000000000000000000000000000000000'],

    ["dt'2024-08-25T14:13:55-06:00'", '1a66cb9083'],
    ["dt'2024-08-25T14:13:55Z'", '1a66cb3c23'],
    ["DT'2024-08-25T14:13:55-06:00'", 'c11a66cb9083'],
    ["DT'2024-08-25T14:13:55Z'", 'c11a66cb3c23'],

    ["dt'2024-08-25T14:13:55.1-06:00'", 'fb41d9b2e420c66666'],
    ["dt'2024-08-25T14:13:55.1Z'", 'fb41d9b2cf08c66666'],
    ["DT'2024-08-25T14:13:55.1-06:00'", 'c1fb41d9b2e420c66666'],
    ["DT'2024-08-25T14:13:55.1Z'", 'c1fb41d9b2cf08c66666'],

    ['18014398509481984', '1b0040000000000000'],
    ['\t/ \\t / 0', '00'],
  ]) {
    try {
      const bytes = parseEDN(str);
      assert.deepEqual(
        bytes,
        hexToU8(expected),
        `${str} => ${u8toHex(bytes)} != ${expected}`
      );
    } catch (e) {
      // eslint-disable-next-line no-console
      console.log('ERROR', expected);
      throw e;
    }
  }
});

test('failures', () => {
  for (const invalid of [
    '',
    ' ',
    '  ',
    '   ',
    '   / foo /',
    '   / foo! / ',
    '   / foo\uFBC2 /  ',
    '   / foo\u{1F4A9} /   / bar /',
    '   / foo /   / bar / ',
    '   / foo /   / bar /  ',
    '/ foo\uD83D /',
    '//',
    '/',
    '#foo',
    '#foo\n',
    '#',
    '#\n',
    '#\u{1F4A9}\n',
    '#\x00\n',
    '#\t\r\uFBC2',
    '#\uD83D',
    '[',
    '[ ',
    '[1, 2',
    '[1, 2,',
    '[1, 2, ',
    '2(',
    '2(2',
    'simple(',
    'simple(0',
    'simple(0 ',
    'simple(1.)',
    '"',
    '"foo',
    '"foo\x00"',
    '"foo\\;"',
    '"foo" +',
    '"foo" + "',
    '"foo" + "ba',
    '(_',
    '(_ "foo"',
    '{',
    '{1',
    '{1:',
    '0x',
    '0b',
    '0o',
    '0x4cp',
    '0x4c.p',
    '0x.',
    '0x.1',
    '0x.1p',
    '1e',
    '1e-',
    "h'",
    '<<',
    '<< 2',
    '<< {',
    '<< 2 {',
    '<< 2 { >>',
    '"\uDCA9"',
    '"\uD83D"',
    '"\\uDCA9"',
    '"\\uD83D"',
    '"\\uD83D\\"',
    '"\\uD83D\\u"',
    '"\\uD83D\\uDD0"',
    '"\\uD83D\\uD000"',
    // '"\\uD83D\\uDD000"',
    // '"\\ud9000"',
    '"\\ud90"',
    '"\\u{"',
    '"\\u{0"',
    '"\\u{03"',
    "z'\\;'",
    '2.0_a',
    '2_a',
    // '0x18_i',
    "zzz'fo\\'o' + zzz'bar'",
    "ZZZ'foo' + yyy'b\"ar'",
    "h'0102' + \"foo\"",
    'h2',
    "h'/'",
    "h'\x00",
    "b64'Zm9vC'",
    "b64'Zm9vZm9vC'",
    "b64'Zm9vZm9vZm9vC'",
    "b64'Zm9vCg==",
    "b64'Zm9vC'",
    "b64'Zmm)'",
    "b64'Zg=*'",
    "b64'",
    "b64'Z",
    "b64'Zg*",
    "b64'Zm9v # \\'\\r'",
    "ip'",
    "ip''",
    "ip'192.168.1.1*'",
    "ip'192.168.1.1/'",
    "ip'192.168.*'",
    "ip'25x'",
    "ip'20x'",
    "ip'2008'",
    "ip'2008*'",
    "ip'2008:2008:2008:2008:2008:2008'",
    "ip'2008:2008:2008:2008:2008:2008:2008'",
    "ip'1:*'",
    "ip'1:2:*'",
    "ip'1:2:3:*'",
    "ip'1:2:3:4:*'",
    "ip'1:2:3:4:5:*'",
    "ip'1:2:3:4:5:6:*'",
    "ip'1:2:3:4:5:6:7:*'",
    "ip'1*'",
    "ip'1:2*'",
    "ip'1:2:3*'",
    "ip'1:2:3:4*'",
    "ip'1:2:3:4:5*'",
    "ip'1:2:3:4:5:6*'",
    "ip'1:2:3:4:5:6:7*'",
    "ip'::1:2:3:4:5:6:7:8'",
    "ip'::1:2:3:4:5:6:7:8:9'",
    "ip'::1*'",
    "ip'::1:2*'",
    "ip'::1:2:3*'",
    "ip'::1:2:3:4*'",
    "ip'::1:2:3:4:5*'",
    "ip'::*'",
    "ip'::1:*'",
    "ip'::1:2:*'",
    "ip'::1:2:3:*'",
    "ip'::1:2:3:4:*'",

    "dt'1'",
    "dt'2024-'",
    "dt'2024*'",
    "dt'2024-0'",
    "dt'2024-01'",
    "dt'2024-01-'",
    "dt'2024-01-0'",
    "dt'2024-01-01'",
    "dt'2024-01-01T'",
    "dt'2024-01-01T0'",
    "dt'2024-01-01T01'",
    "dt'2024-01-01T01:'",
    "dt'2024-01-01T01:0'",
    "dt'2024-01-01T01:01'",
    "dt'2024-01-01T01:01:'",
    "dt'2024-01-01T01:01:0'",
    "dt'2024-01-01T01:01:01'",
    "dt'2024-01-01T01:01:01.'",
    "dt'2024-01-01T01:01:01-'",
    "dt'2024-01-01T01:01:01-0'",
    "dt'2024-01-01T01:01:01-00'",
    "dt'2024-01-01T01:01:01-00:'",
    "dt'2024-01-01T01:01:01-00:0'",
    'simple(256)',
    'simple(-1)',
    'simple(-0)',
  ]) {
    assert.throws(() => parseEDN(invalid), invalid);
  }
});

test('registerAppString', () => {
  // Before registration, 999(["rot13", "foo"])
  assert.equal(u8toHex(parseEDN("rot13'foo'")), 'd903e78265726f74313363666f6f');
  const orig = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  const rot = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm';

  registerAppString(
    'rot13',
    (_prefix, str) => [
      null,
      str.replace(/[a-z]/gi, c => rot[orig.indexOf(c)]),
    ]
  );

  // After registration, rotated string
  assert.equal(u8toHex(parseEDN("rot13'foo'")), '63736262');
  assert.equal(u8toHex(parseEDN("rot13'sbb'")), '63666f6f');

  // Back to original
  registerAppString('rot13');
  assert.equal(u8toHex(parseEDN("rot13'foo'")), 'd903e78265726f74313363666f6f');

  // Invalid rule
  registerAppString('iiii', () => ['__InVaLid__']);
  assert.throws(() => parseEDN("iiii''"), /Invalid start rule/);
});
